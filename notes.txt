hooks = v16.8 react addition
      = use class based react features on functional components
      = avoid confusion on "this" keyword, and better minification
      = reuse stateful logic
      = organize logic in a component into reuseable isolated units


>>> npx create-react-app h

rules of hooks:
- only call hooks at top level, never call inside loops, conditions or nested function
- only call hooks from react functions

useState
- add state to functional components
- returns "current value" and "state setter function"


useEffect
- side effects in functional component
- prevents repeating code (replaces componentDidMount, componentDidUpdate, componentWillUnmount)
- execute function everytime after component renders


useContext
- similar to context api for class based components
- simplifies consumption


javascript reducer example:

      const arr1 = [1,2]
      const reducer = (accumulator, currentValue) => accumulator + currentValue
      arr1.reduce(reducer, 1) //expected: 4


useReduce
- hook for state management, alternative to useState
- if your state can be changed with multiple actions
- slightly similar to redux