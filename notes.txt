hooks = v16.8 react addition
      = use class based react features on functional components
      = avoid confusion on "this" keyword, and better minification
      = reuse stateful logic
      = organize logic in a component into reuseable isolated units


>>> npx create-react-app h

rules of hooks:
- only call hooks at top level, never call inside loops, conditions or nested function
- only call hooks from react functions

useState
- add state to functional components
- returns "current value" and "state setter function"


useEffect
- side effects in functional component
- prevents repeating code (replaces componentDidMount, componentDidUpdate, componentWillUnmount)
- execute function everytime after component renders


useContext
- similar to context api for class based components
- simplifies consumption


javascript reducer example:

      const arr1 = [1,2]
      const reducer = (accumulator, currentValue) => accumulator + currentValue
      arr1.reduce(reducer, 1) //expected: 4


useReduce
- hook for state management (limited only within the component), alternative to useState
- if your state can be changed with multiple actions
- and also to track multiple state values



useState vs useReducer  (when to use)

useState if:
- number, string, boolean
- one or two state transitions
- unrelated state transitions
- no business logic
- local state

useReducer if:
- object, array
- too many state transitions
- related state transitions
- complex business logic (complex data transformation/manipulation)
- global state (+ useContext)


React.memo()
- don't render if state or props did not changed
- used during export of component


useCallback
- return memoized version of callback function that only changes if one of the dependencies changed

useMemo
- avoid expensive calculation if not needed
- execute if dependency changed
- returns a cached value


difference of useCallback and useMemo

      useCallback = caches the provided function instance itself
                  = use if you want to cache a function

      useMemo = invokes the provided function and caches the result
              = use if you want to cache the result of an invoked function
